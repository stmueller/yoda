/**
 * Nishanth Gandhidoss
 */

var updateFlag = false, zeroQuantity = false, updateQuantity;
$(document).ready(function() {
	
	// Tool tip
	$("a.tooltipLink").tooltip();

	$("th,td").addClass("text-center");

	$('.selectBoxGroup').select2();
	
	// Date Picker
	$('.form_date').datetimepicker({
	    //language:  'fr',
	    weekStart: 1,
	    todayBtn:  1,
		autoclose: 1,
		todayHighlight: 1,
		startView: 2,
		minView: 2,
		forceParse: 0
	});
	
	var formObj = $('#invoiceForm');
	
	// Get Remaining Total Quantity
	$("#quantity").keyup(function() {
		formObj.formValidation('enableFieldValidators', 'quantity', true);
		getRemainingQuantity();
	});
	$("#quantity").click(function() {
		formObj.formValidation('enableFieldValidators', 'quantity', true);
		getRemainingQuantity();
	});
	
	// Convert date format
	$(".indDateFormat").each(function() {
	    var formattedDate = toIndianDateFormat($(this).text());
		$(this).text(formattedDate);
	});

	// Revalidate on update click
    $(".tblRow>td").click(function() {
		formObj.formValidation('revalidateField', 'invoiceDateValidation');
		formObj.formValidation('revalidateField', 'invoiceNumber');
		formObj.formValidation('revalidateField', 'quantity');
		formObj.formValidation('revalidateField', 'generatedBy');
    })
    
    $(".tblRow>tr").attr("title", "Update Invoice Details");
    
	// Date Revalidation
	$('#invoiceDate').on('changeDate', function(e) {
		formObj.formValidation('revalidateField', 'invoiceDateValidation');
    });
	
	// Add New Invoice - On BTN click
	$("#addNewInvoice").click(function() {
		hideBtn();
		updateFlag = false;
		getRemainingQuantity();
		$('input[type="text"]').val("");
		$('select').val(0);
	});
	
	// Transpose Invoice Table
   /* $("table").each(function() {
        var $this = $(this);
        var newrows = [];
        $this.find(".tblRow").each(function(){
            var i = 0;
            $(this).find("td").each(function(){
                i++;
                if(newrows[i] === undefined) { newrows[i] = $("<tr></tr>"); }
                newrows[i].append($(this));
            });
        });
        $this.find(".tblRow").remove();
        $.each(newrows, function(){
            $this.append(this);
        });
    });*/
    
	formObj.formValidation({
	    framework: 'bootstrap',
	    icon: {
	        valid: 'glyphicon glyphicon-ok',
	        invalid: 'glyphicon ',// removing glyphicon-remove to disable x symbol in text box
	        validating: 'glyphicon glyphicon-refresh'
	    },
	    fields: {
	    	invoiceDateValidation: {
	    		row: '.col-xs-4',
	            validators: {
	                notEmpty: {
	                    message: 'Invoice Date is required'
	                }
	            }
	        },
	        invoiceNumber: {
	        	row: '.col-xs-4',
	        	validators: {
	                notEmpty: {
	                    message: 'Invoice Number is required'
	                }
	        	}
	        },
	        quantity: {
	        	row: '.col-xs-4',
	        	validators: {
	                notEmpty: {
	                    message: 'Quantity is required'
	                },
	                between: {
	                	min: 1,
	                    max: 'remainingQuantity',
	                    message: 'Quantity cannot be zero or more than remaining quantity'
	                }
	            }
	        },
	        generatedBy: {
	        	row: '.col-xs-4',
	        	validators: {
	                notEmpty: {
	                    message: 'Generated by is required'
	                }
	        	}
	        }
	    }
	})
	.on('success.field.fv', function(e, data) {
		  var $parent = data.element.parents('.col-xs-4');
		  $parent.removeClass('has-success');
		  data.element.data('fv.icon').hide();
    })
    .on('success.form.fv', function(e) {
    	e.preventDefault();
    	var $form = $(e.target);
        var $button = $form.data('formValidation').getSubmitButton(),
        $statusField = $form.find('[name="commit"]'),
        url = "",jsonKey = "";
     	var btnId = $button.attr('id');
     	if(btnId == "inv-submit") {
			url = "saveInvoice.sp";
			jsonKey="saveInvoice";
		} else if(btnId == "inv-update") {
			url = "updateInvoice.sp";
			jsonKey="updateInvoice";
			var quantity = getRemainingQuantity();
			if(quantity < 1) {
				zeroQuantity = true;
				var msg = "No quantity left redirecting to List Route card page";
				showDialog(BootstrapDialog.TYPE_DANGER, "dialogBoxError", msg, formObj, true, zeroQuantity);
			}
		} else if(btnId == "inv-delete") {
			url = "deleteInvoice.sp";
			jsonKey="deleteInvoice";
			$("#quantity").val($("#hiddenQuantity").val());
		}
     	trimFormInputs();
		var jsondata = submitFrm(this,url);
		redirectToLoginIfNotAJsonObject(jsondata);
	    var isSuccess = displayDialogWithJsondata(jsondata,jsonKey,formObj);
	    
	    /*if(isSuccess)*/
    });
});

//Custom Functions

function displayDialogWithJsondata(jsondata,jsonKey,formObj){
	var isSuccess;
	$.each(jsondata, function(key, jObject) {
		if (key == jsonKey && jObject.returnId > 0) {
			dialogType = BootstrapDialog.TYPE_INFO;
			btnStyle = "dialogBoxSuccess";
			msg = "<h4>" + jObject.returnMsg + "</h4>";
			isSuccess = true;
		} else {
			msg = "<h4>" + jObject.returnMsg + "</h4>";
			dialogType = BootstrapDialog.TYPE_DANGER;
			btnStyle = "dialogBoxError";
			isSuccess = false;
		}
		showDialog(dialogType, btnStyle, msg, formObj, isSuccess, zeroQuantity);
	});
	return isSuccess;
}

function showDialog(dialogType, btnStyle, msg, formObj, isSuccess) {
	BootstrapDialog.show({
		type : dialogType,
		draggable : true,
		size : BootstrapDialog.SIZE_NORMAL,
		title : 'Message',
		message : msg,
		closable : true,
		closeByBackdrop : false,
		closeByKeyboard : false,
		buttons : [ {
			label : 'OK',
			cssClass : btnStyle,
			action : function(dialog) {
				dialog.close();
				if(isSuccess) {
					if($("#hiddenRemTotQuan").val() == $("#quantity").val() || zeroQuantity)
						window.location.href = "listRouteCard.sp"; 
					else {
						resetForm(formObj);
						resetFormValidation(formObj);
				    	location.reload();
					}
				}
			}
		} ]
	});
}

function toIndianDateFormat(date) {
	var newdate = date.split("-").reverse().join("-");
	return newdate;
}

function update(invoiceId) {
	$("#invoiceId").val(invoiceId);
	var invoiceJson = $('#invoiceJson').text();
	var invoice = JSON.parse(invoiceJson);
	for(i=0;i<invoice.length;i++) {
		if(invoice[i].id == invoiceId) {
			$("#invoiceDateTxtbx").val(invoice[i].invoiceDate);
			$("#invoiceDteHidId").val(invoice[i].invoiceDate);
			$("#invoiceNumber").val(invoice[i].invoiceNumber);
			$("#generatedBy").val(invoice[i].generatedBy);
			$("#quantity").val(invoice[i].quantity);
			$("#hiddenQuantity").val(invoice[i].quantity);
		}
	}
	$('#invoiceForm').formValidation('enableFieldValidators', 'quantity', false);
	showBtn();
	updateFlag = true;
	updateQuantity = parseInt($("#quantity").val());
	getRemainingQuantity();
	copyDateValueFromSourceToDestId("#invoiceDteHidId","#invoiceDateTxtbx");
}

function showBtn() {
	$("#inv-submit,#inv-reset").addClass("hidden");
	$("#inv-update,#inv-delete,#addNewInvoice").removeClass("hidden");
}

function hideBtn() {
	$("#inv-submit,#inv-reset").removeClass("hidden");
	$("#inv-update,#inv-delete,#addNewInvoice").addClass("hidden");
}

function getRemainingQuantity() {
	var url = "getRemainingTotalQuantityById.sp", isSuccess = false;
	var id = $("#routeCardNo").val();
	$.get(url,{"id":id},function(data){
	   $.each(data, function (key, jObject) {
		  if(key=="rcBO" && jObject.remainingTotalQuantity > -1) {
			  var quantity = parseInt(jObject.remainingTotalQuantity);
			  if(updateFlag) {
				  quantity = quantity + updateQuantity;
			  }
			  $("#remainingQuantity").removeClass("hidden");
			  $("#remainingQuantity>label").text("Remaining :- " + quantity);
		  	  $("#hiddenRemTotQuan").val(quantity);
		  }
		});
	});
	var $quantity = $("#quantity");
	$("#invoiceForm").formValidation('validateField', 'quantity');
	return quantity;
}
function loadBarcodeImg(){
	var invoiceNo = $("#invoiceNumber").val();
	if(invoiceNo != "") {
	    $("#hiddenObjId").val(invoiceNo);
	    var url="getbarcode.sp";
	    document.getElementById("barcodeImgID").src="getbarcode.sp?grnNo="+invoiceNo;
	    $("#modalGrnNoID").html("Invoice No : "+invoiceNo);
	    $("#modalBarcodeImgID").modal('show');
	} else {
		$("#invoiceNumber").focus();
		$("#invoiceForm").formValidation('validateField', 'invoiceNumber');
	}
}
function printBarcode(){
	  var id=$("#hiddenObjId").val();
	  var url="printbarcode.sp";
	  $.get(url,{grnNo:id},function(data,status){});
}